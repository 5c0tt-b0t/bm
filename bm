#!/usr/bin/env bash

# default filename for Baker config file (just the filename no path)
readonly _BM_DEFAULT_CONFIG_FILENAME="${_BM_DEFAULT_CONFIG_FILENAME:=bm.conf}"


config() {
	echo "Reading Configuration..." >&2
	[[ "${__w:=$HOME}" != "${HOME}" ]] && echo "Working dir changed to ${__w}"
	[[ "${__w: -1}" != '/' ]] && __w="${__w//\/\//\/}/"
	#Â If a config file is given, we take it first, or look for a default config file
	if [ -f "$(readlink -m "${1:-}")" ]; then
		. "${1}"
	elif [ ${__n:=0} -eq 0 -a -f "${__w}${_BM_DEFAULT_CONFIG_FILENAME}" ]; then
		. "${__w}${_BM_DEFAULT_CONFIG_FILENAME}"
		echo "Default config file loaded ${__w}${_BM_DEFAULT_CONFIG_FILENAME}"
	fi

	# _BM_BOOKMARK_FILE : Where is stored the bookmark file
	export _BM_BOOKARK_FILE="${_BM_BOOKMARK_FILE:=${__w}bm.lnk}"

	# _BM_DELETE_ALLOWED : Even with the force flag the delete function will not be allowed (true or false)
	export _BM_DELETE_ALLOWED=${_BM_DELETE_ALLOWED:=true}

	# _BM_DELETE_TO_FILE : Allow or disallow the deleted URLs to be copied in the Trash (true or false)
	export _BM_DELETE_TO_FILE=${_BM_DELETE_TO_FILE:=true}

	# _BM_DELETE_FILE : Where to find the deleted URLs
	export _BM_DELETE_FILE="${_BM_DELETE_FILE:=${__w}.bm.trash}"

	# _BM_DUPS_DETECT : Look for duplicates URL before insert in bookmark file
	export _BM_DUPS_DETECT=${_BM_DUPS_DETECT:=true}

	# _BM_ASK_BEFORE_OPEN : When using bm with a URL (or search term) ask before opening the browser if more than one answer
	export _BM_ASK_BEFORE_OPEN=${_BM_ASK_BEFORE_OPEN:=true}

	# _BM_GET_PAGE_TITLE : When adding a URL execute a curl command to get the <title> if none given
	export _BM_GET_PAGE_TITLE=${_BM_GET_PAGE_TITLE:=true}

	# _BM_GET_SCREENSHOT : When adding a URL try to take a screenshot in background
	export _BM_GET_SCREENSHOT=${_BM_GET_SCREENSHOT:=true}

	# _BM_WAIT_SCREENSHOT : When taking a screenshot wait for the action to finish
	export _BM_WAIT_SCREENSHOT=${_BM_WAIT_SCREENSHOT:=false}

	# _BM_HTML_FILE : Location of generated HTML file
	export _BM_HTML_FILE="${_BM_HTML_FILE:=${__w}bm.html}"

	# _BM_OPEN_FIRST : When using open, the first link found is open
	#              Also work with the copy to clipboard function
	export _BM_OPEN_FIRST="${_BM_OPEN_FIRST:=${__y:=0}}"

	# _BM_NO_ARGS_FORCE_HELP : If no args given to script sends to help instead of list all link
	export _BM_NO_ARGS_FORCE_HELP=${_BM_NO_ARGS_FORCE_HELP:=false}

	# _BM_CREATE_BOOKMARK_FILE : If bm is called to list and no file exists. bm will create  a default one.
	export _BM_CREATE_BOOKMARK_FILE=${_BM_CREATE_BOOKMARK_FILE:=true}

	# _BM_CMD_CAPTURE_CHECK : If you don't have tool installed to take screenshot, just put to false.
	#                     It will disable the _BM_GET_SCREENSHOT.
	export _BM_CMD_CAPTURE_CHECK=${_BM_CMD_CAPTURE_CHECK:=true}

	# I suppose the uname command is available
	if [ "$(uname -s)" = 'Linux' ]; then
		export _BM_CMD_OPEN='xdg-open'
		export _BM_CMD_CAPTURE='cutycapt'
		export _BM_CMD_MD5='md5sum'
	else
		# To keep commpatibility with the Mac (even i don't have any)
		export _BM_CMD_OPEN='open'
		export _BM_CMD_CAPTURE='webkit2png'
		export _BM_CMD_MD5='md5'
	fi

	# _BM_PRINT_LINE : This line is used to print datas
	export _BM_PRINT_LINE="${_BM_PRINT_LINE:=${UNDERLINE}${GRAY_LIGHT}BM_URL${RESET} --> ${RESET}BM_TITLE ${GRAY_DARK}[BM_TAGS]\n${BOLD}${GRAY}BM_ACCEL ${GRAY_DARK}(BM_MD5)${RESET} - ${GRAY_DARK}Added: BM_DATE${RESET}}"

	# _BM_PRINT_SCHEME : If set to no, bm will remove scheme from URL printing
	export _BM_PRINT_SCHEME=${_BM_PRINT_SCHEME:=true}
}


# headers prints the header of a markdown file
getHeaders() {
        awk '/^---$/ { c++; next } c == 1'
}

# header prints a specific header value
getHeader() {
        getHeaders | sed -e '/^[[:space:]]*'"${1}"'[[:space:]]*:/!d;s/[[:space:]]*'"${1}"'[[:space:]]*:[[:space:]]*\(.*\)/\1/g'
}

# body prints the body of a markdown file
getBody() {
        awk '/^---$/ { c++; next } c >= 2'
}

# slug creates a friendly URL like 'hello-world'
slug() {
        iconv -f utf8 -t ascii//TRANSLIT | tr -cs '[:alnum:]\n' - | tr '[:upper:]' '[:lower:]' | sed 's|^-*||;s|-*$||'
}




# version

VERSION="0.5.0-$Id$"

# bookmarks dir

DIR=~/Dropbox

# thumbs cache

THUMBS=$DIR/bookmark-thumbs

# bookmarks file

BOOKMARKS=$DIR/bookmarks

# HTML file

HTML=/tmp/bm.html

#
# Output usage info
#

usage() {
  cat <<EOF

  Usage: bm [options] [cmd]

  Commands:

    # add a bookmark with the given url, description, and optional tags
    $ bm add <url> [desc] [tag...]

    # open the first bookmark matching <query>
    $ bm open <query>
    $ bm <query>

    # search the bookmarks via full-text <query>
    $ bm search <query>

    # list tags
    $ bm tags

    # list bookmarks available
    $ bm list
    $ bm ls
    $ bm

    # display statistics about the bookmarks
    $ bm statistics
    $ bm stats

    # view bookmark screenshots in your default browser
    $ bm view design
    $ bm view

    # clear all bookmarks
    $ bm clear

  Options:

     -V, --version   output bm version
     -h, --help      output this help information

Usage: ${0} command [option(s)]

	Commands :
	-a 'URL'	Add the URL to bookmark file
			Options for -a
			-t "TagList"	Tags are sparated by a comma ,
			-T "Title"	Title for this URL (if empty and allowed Title
					downloaded)
			-A "accel"	Accelerator when search for URLs (start with Accel)
					Default is FQDN without gTld (and www, and sheme)

	-d 'URL' or	Delete the URL from bookmark file
	   md5sum or
	   'part of the URL'


EOF
}

getAccelMax() {
	awk -F'|' '
		BEGIN { m=0; }
		$2 ~ /^[[:SPACE:]]*:[[:SPACE:]]*[0-9][[:SPACE:]]*+$/ { n=gensub(/:([0-9]+)/, "\\1", "g", $2); if (n>m) m=n; }
		END { print m; }
	' "${_BM_BOOKMARK_FILE}"
}

saveUrl() {
	local _sum="$(${_BM_CMD_MD5} <<< "${__url}")"
	if [ ${_BM_DUPS_DETECT} ]; then
		if [ ! -z "$(awk -F '|' '$1 ~ /'"${_sum%% *}"'/' "${_BM_BOOKMARK_FILE}")" ]; then
			die "URL is already in the Bookmark file"
		fi
	fi
	if [ ${_BM_GET_PAGE_TITLE} -a -z "${__T:=}"]; then
		__T="$( curl -ks "${__url}" 2>&1 | sed '/<title>/I!d;/<\/title>/I!d;s;^[[:space:]]*<title>\([^<]*\)<.*;\1;i' )"
	fi
	[[ -z "${__T:=}" ]] && __T="$(slug <<< "${__url}")"	# If no title => slug the url
	[[ -z "${__t:=}" ]] && __t='default'			# Default tag is default
	[[ -z "${__A:=}" ]] && __A="$(getAccelMax)"
	[[ "${__A:0:1}" != ':' ]] && __A=":${__A}"		# If no accel => Add a number
	echo "${_sum%% *}|${__A}|${__url}|${__T}|${__t}|$(date '+%FT%TZ')" >> "${_BM_BOOKMARK_FILE}" || die "Insert aborted into '${_BM_BOOKMARK_FILE}' !"
	echo "${__url} inserted into '${_BM_BOOKMARK_FILE}'"
}

#
# Add a bookmark
#
#   <url> [description] [tag ...] 
#
save_bookmark() {
	local url=$1
	local _sum="$(${_BM_CMD_MD5} <<< "${url}")"
	local desc=$2
	local tags=${@:3}
	if [ ${_BM_DUPS_DETECT} ]; then
		if [ ! -z "$(awk -F '|' '$1 ~ /'"${_sum%% *}"'/' "${_BM_BOOKMARK_FILE}")" ]; then
			die "URL is already in the Bookmark file"
		fi
	fi
	echo
	echo "  Added bookmark"
	echo
	echo "    url: $url"
	echo "    description: $desc"
	echo "    tags: $tags"
	echo
	echo "${_sum%% *}|$url|$desc|$tags" >> "${_BM_BOOKMARK_FILE}"
#	echo "${_sum%% *}|$url|$desc|$tags" >> $BOOKMARKS
}

#
# manage each line to print it
#

readLines() {
	IFS='|'
	while read m a u T t d; do
		_line="${_BM_PRINT_LINE}"
		_line="${_line//BM_MD5/$m}"
		if [ ! ${_BM_PRINT_SCHEME} ]; then
			u="$(sed 's/^[[:space:]]*\(f\|ht\)tps*:\/\///' <<< "${u}")"
		fi
		_line="${_line//BM_URL/$u}"
		_line="${_line//BM_TITLE/$T}"
		_line="${_line//BM_TAGS/$t}"
		_line="${_line//BM_ACCEL/${a:=No-Accelerator}}"
		_line="${_line//BM_DATE/${d}}"
		echo -e "${_line}\n"
	done
}

#
# List all bookmarks
#

list_bookmarks() {
	cat "${_BM_BOOKMARK_FILE}" |readLines
}

#
# Search all bookmarks with <query>
#

search_bookmarks() {
	local _s=''
	case "${1:0:1}" in
		:) _s=2 ;; # Accelerator
		+) _s=5 ;; # Tags
		=) _s=1 ;; # MD5 part
		/) _s=3 ;; # URL part
		*) _s=0 ;; # full text search
	esac
	awk -F'|' '
		$'"${_s}"' ~ /'"${1:1}"'/
	' "${_BM_BOOKMARK_FILE}" | readLines
return
	echo
#	cat $BOOKMARKS \

	cat "${_BM_BOOKMARK_FILE}" \
	| grep $1 \
	| awk '
		BEGIN { FS = "|" }
		{
		printf "  \033[36m%s\033[0m\n", $2
		printf "  \033[33m%s\033[0m\n", $3
		printf "  \033[90m%s\033[0m\n\n", $4
	}' \
	| sed 's/^[[:space:]]*\(f\|ht\)tps*:\/\///'
	echo
}

#
# Open first bookmark matching <query>
#

open_bookmark() {
#	cat $BOOKMARKS \

	cat "${_BM_BOOKMARK_FILE}" \
	| grep $1 \
	| cut -d '|' -f 2 \
	| xargs "${_BM_CMD_OPEN}"
}

#
# Diplay some statistics about the bookmarks
#

show_statistics() {
	local total_bookmarks=$(cat "${_BM_BOOKMARK_FILE}" | wc -l | sed 's/^ *//')
	local total_tags=$(list_tags | wc -l | sed 's/^ *//')

	echo
	echo "    total bookmarks: $total_bookmarks"
	echo "         total tags: $total_tags"
	echo "        top 10 tags: `display_top_ten_tags`"
	echo
}

#
# Output tags.
#

list_tags() {
#	cat $BOOKMARKS \

	cat "${_BM_BOOKMARK_FILE}" \
	| cut -f4 -d '|' \
	| tr " " "\n" \
	| sort \
	| uniq -c \
	| sort -nr
}

# 
# Display the 10 most frequently used tags
#

display_top_ten_tags() {
	echo
	printf "%20s  %s\n" count tag
	list_tags \
	| head -10 \
	| awk '{ printf("%20d  %s\n", $1, $2) }'
}


#
# Stylesheet
#

style() {
  cat <<EOF
<style>
  * {
     -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
     box-sizing: border-box;
   }
   body {
     padding: 50px 0 5px 50px;
     background: #1f1f1f url(http://subtlepatterns.com/patterns/black-Linen.png);
     font: 12px "Helvetica Neue", Helvetica, Arial, sans-serif;
   }
   .bm {
     position: relative;
     float: left;
     margin: 15px;
     padding: 1px;
     opacity: 1;
     border: 15px solid black;
     -webkit-border-radius: 5px;
     -moz-border-radius: 5px;
     -webkit-transition: -webkit-box-shadow 600ms;
     -moz-transition: -webkit-box-shadow 600ms;
     -webkit-box-shadow: 0 0 1px 0 #555, 0 0 10px rgba(0,0,0,.5);
     -moz-box-shadow: 0 0 1px 0 #555, 0 0 10px rgba(0,0,0,.5);
     overflow: hidden;
   }
   .bm:hover {
     -webkit-box-shadow: 0 0 40px #1ab0ff
       , 0 0 3px #06bdff
       , 0 1px 1px #4ee2ff
       , 0 1px 0 #fff;
     -moz-box-shadow: 0 0 40px #1ab0ff
       , 0 0 3px #06bdff
       , 0 1px 1px #4ee2ff
       , 0 1px 0 #fff;
   }
   .bm:hover img {
     opacity: 1;
   }
   .bm img {
     width: 200px;
     height: 150px;
     opacity: .5;
     -webkit-transition: opacity 200ms;
     -moz-transition: opacity 200ms;
   }
   .bm p {
     margin: 0;
     padding: 10px;
     width: 100%;
     background: rgba(0,0,0,.75);
     position: absolute;
     left: 0;
     color: white;
     letter-spacing: 1px;
     bottom: -50px;
     -webkit-font-smoothing: antialiased;
     -webkit-transition: bottom 200ms ease-in;
   }
   .bm:hover p {
     bottom: 0;
   }
</style>
EOF
}

#
# List urls
#

urls() {
  cat $BOOKMARKS \
    | grep "$1" \
    | cut -d '|' -f 2
}

#
# Generate bookmark screenshots
#

create_bookmark_screenshots() {
  which webkit2png > /dev/null

  if test $? -ne 0; then
    echo 
    echo "  You need webkit2png(1) installed for this feature:"
    echo "  $ brew install webkit2png"
    echo 
    exit
  fi

  local urls=`urls`

  # thumbs dir
  mkdir -p $THUMBS

  # fetch thumbs
  for url in $urls; do
    local path=$THUMBS/`echo $url | md5`.png
    if ! test -f $path; then
      webkit2png -C -o out.png $url
# cutycapt --out="out.png" --url="$url"
      mv out.png-clipped.png $path
      echo " ... added $path"
    fi
  done

  rm -f out.png-{clipped,full,thumb}.png
}

#
# View bookmark screenshots grep <pattern>
#

view_bookmark_screenshots() {
  create_bookmark_screenshots

  echo "<title>Bookmarks</title>" > $HTML
  style >> $HTML

  (
    while read line; do
      # TODO: slow... refactor
      local url=`echo "$line" | cut -d '|' -f 2`
      local desc=`echo "$line" | cut -d '|' -f 3`
      local tags=`echo "$line" | cut -d '|' -f 4`
      local path=$THUMBS/`echo $url | md5`.png
      echo "
        <div class=bm>
          <a href='$url'>
            <img src='$path' />
          </a>
          <p>$desc</p>
        </div>
      " >> $HTML
    done
  ) < <(cat $BOOKMARKS | grep "$1")

  open $HTML
}

#
# Remove all bookmarks
#

clear_bookmarks() {
  rm $BOOKMARKS
  rm -fr $THUMBS
}

#
# die print message to stderr and exit
#

die() {
        echo -e "${@}" >&2
        exit 1
}


#
# checkBinaries check the script is able to run and give hints
#

checkBinaries() {
	if [ ${#} -ne 0 ]; then
		local cmdErr="${@}"
	else
		local cmdErr="sed awk date iconv head cat curl ${_BM_CMD_OPEN} ${_BM_CMD_MD5}"
	fi
	set ${cmdErr}
	while [ ${#} -ne 0 ]; do
		if ! command -v "${1:-}" &>/dev/null; then
			echo "command not found: ${1}" >&2
			local rc=1
		fi
		shift
	done
	[[ ${rc:=0} -ne 0 ]] && die "At least one command is missing. Please install it before using bm."
	# Checking sed 
	local rc=1
	[[ ! -f "/tmp/sedtest.$$" ]] && \
	echo -n 'toto' > "/tmp/sedtest.$$" && \
	sed -i.bak -e 's;^toto$;tata;' "/tmp/sedtest.$$" && \
	[[ -f "/tmp/sedtest.$$.bak" ]] && \
	grep -q "tata" "/tmp/sedtest.$$" && \
	rc=0 && \
	rm -f "/tmp/sedtest.$$" "/tmp/sedtest.$$.bak"
	[[ ${rc} -ne 0 ]] && die "sed seems to not handle -i arguent properly, please check"
}

#
# defineColors generate the variables to use to colorize the output
#

defineColors() {
	export BLACK="\e[30m";		export BLACK_LIGHT="\e[90m";	export GRAY_DARK="${BLACK_LIGHT}"
	export RED="\e[31m";		export RED_LIGHT="\e[91m"
	export GREEN="\e[32m";		export GREEN_LIGHT="\e[92m"
	export YELLOW="\e[33m";		export YELLOW_LIGHT="\e[93m"
	export BLUE="\e[34m";		export BLUE_LIGHT="\e[94m"
	export MAGENTA="\e[35m";	export MAGENTA_LIGHT="\e[95m"
	export CYAN="\e[36m";		export CYAN_LIGHT="\e[96m"
	export GRAY="\e[37m";		export GRAY_LIGHT="\e[97m";	export WHITE="${GRAY_LIGHT}"

	export RESET="\e[0m"
	export BOLD="\e[1m";		export BOLD_RESET="\e[21m"
	export DIM="\e[2m";		export DIM_RESET="\e[22m"	
	export UNDERLINE="\e[4m";	export UNDERLINE_RESET="\e[24m"
	if [ ! -z "${1:-}" ]; then
		echo "Use the following colors to fit your needs :"
		(
		echo -e "${RESET}${BLACK}BLACK${RESET} - ${BLACK_LIGHT}BLACK_LIGHT${RESET} - ${BOLD}${BLACK}BOLD BLACK${RESET} - ${DIM}${BLACK}DIM BLACK${RESET}"
		echo -e "${RESET}${RED}RED${RESET} - ${RED_LIGHT}RED_LIGHT${RESET} - ${BOLD}${RED}BOLD RED${RESET} - ${DIM}${RED}DIM RED${RESET}"
		echo -e "${RESET}${GREEN}GREEN${RESET} - ${GREEN_LIGHT}GREEN_LIGHT${RESET} - ${BOLD}${GREEN}BOLD GREEN${RESET} - ${DIM}${GREEN}DIM GREEN${RESET}"
		echo -e "${RESET}${YELLOW}YELLOW${RESET} - ${YELLOW_LIGHT}YELLOW_LIGHT${RESET} - ${BOLD}${YELLOW}BOLD YELLOW${RESET} - ${DIM}${YELLOW}DIM YELLOW${RESET}"
		echo -e "${RESET}${BLUE}BLUE${RESET} - ${BLUE_LIGHT}BLUE_LIGHT${RESET} - ${BOLD}${BLUE}BOLD BLUE${RESET} - ${DIM}${BLUE}DIM BLUE${RESET}"
		echo -e "${RESET}${MAGENTA}MAGENTA${RESET} - ${MAGENTA_LIGHT}MAGENTA_LIGHT${RESET} - ${BOLD}${MAGENTA}BOLD MAGENTA${RESET} - ${DIM}${MAGENTA}DIM MAGENTA${RESET}"
		echo -e "${RESET}${CYAN}CYAN${RESET} - ${CYAN_LIGHT}CYAN_LIGHT${RESET} - ${BOLD}${CYAN}BOLD CYAN${RESET} - ${DIM}${CYAN}DIM CYAN${RESET}"
		echo -e "${RESET}${GRAY}GRAY${RESET} - ${GRAY_LIGHT}GRAY_LIGHT${RESET} - ${BOLD}${GRAY}BOLD GRAY${RESET} - ${DIM}${GRAY}DIM GRAY${RESET}"
		echo -e "${RESET}${GRAY_DARK}GRAY_DARK${RESET} - ${WHITE}WHITE${RESET}"
		) | column -t
		echo -e "You could also use the ${UNDERLINE}UNDERLINE and the ${RESET}RESET variable."
		exit 0
	fi
}
#tototo() {
#	unset tabb
#	declare -a tabb
#	export tabb
#	readarray -t tabb < <( sed -e 's;|;\n;g' )
#}
#echo "bd8b3eff7fa82a0382a3e7576c5363b6|:bm|https://github.com/Flyounet/bm/|bm a cool enhanced bookmark tool for your console|default,shell|$(date '+%FT%TZ')" | tototo
#echo ${tabb[0]}
#echo ${#tabb[@]}
#echo ${tabb[2]}
#exit
##############################################################################
# MAIN
##############################################################################
#set -xv
checkBinaries

# defineColors MUST be called before the config() or _BM_PRINT_LINE will be in trouble.
defineColors
# Until arguments are not checked, the config is called before
config "${__c}"
[[ ${_BM_CMD_CAPTURE_CHECK} ]] && checkBinaries "${_BM_CMD_CAPTURE}"


##############################################################################

# 1 : MD5
# 2 : :Accel
# 3 : URL
# 4 : Title
# 5 : tags
# 6 : creation date

if [ ! -f "${_BM_BOOKMARK_FILE}" -a ${_BM_CREATE_BOOKMARK_FILE} ]; then
	echo "bd8b3eff7fa82a0382a3e7576c5363b6|:bm|https://github.com/Flyounet/bm/|bm a cool enhanced bookmark tool for your console|default,shell|$(date '+%FT%TZ')" >> "${_BM_BOOKMARK_FILE}"
	echo "2981b5cae113491ddb18e0d51454f0d9|:bmtj|https://github.com/tj/bm/|The original bm : a cool bookmark tool for your console|default,shell|$(date '+%FT%TZ')" >> "${_BM_BOOKMARK_FILE}"
fi

[[ ${#} -eq 0 && ${_BM_NO_ARGS_FORCE_HELP:=0} -eq 0 ]] && list_bookmarks && exit 0
# parse args

#while test $# -ne 0; do
#  arg=$1; shift
#  case $arg in
#    -V|--version) echo $VERSION; exit ;;
#    -h|--help) usage; exit ;;
#    tags) list_tags; exit ;;
#    ls|list) list_bookmarks; exit ;;
#    search) search_bookmarks "$@"; exit ;;
#    open) open_bookmark "$@"; exit ;;
#    add) save_bookmark "$@"; exit ;;
#    view) view_bookmark_screenshots "$@"; exit ;;
#    stats|statistics) show_statistics; exit ;;
#    clear) clear_bookmarks; exit ;;
#    colors) defineColors 1; exit ;;
#    *) open_bookmark $arg; exit ;;
#  esac
#done

#exit 0

##################### TRANSITIONNAL ############################
echo "av reg"
_regex='^(tags|ls|list|search|open|add|view|stats|statistics|clear|colors)$'
echo "ap reg"
if [[ ${1:-} =~ ${_regex} ]]; then
echo "av case args"
        case "$1" in
                tags) list_tags ;;
                ls|list) list_bookmarks ;;
                search) search_bookmarks "${@:1}" ;;
                open) open_bookmarks "${@:1}" ;;
                add) __a=1; __url="${1:-}"; __T="${2:-}"; __t="${3:-}"; __A="${4:-}"; saveUrl; exit ;;
                view) view_bookmark_screenshots "${:1}"; exit ;;
		stats|statistics) show_statistics; exit ;;
		clear) clear_bookmarks; exit ;;
		colors) __C=1;;
        esac
echo "ap case args"
else
#q -c config file
# -C colors print ==> exit
# -b bookmark file
# -d delete
# -D deletefile if set override _BM_DELETE_TO_FILE to true
# -w working dir
# -a add url  =/= -l, -s, -S, -O, -o, -x, -X, -g, -C
# -A Accelerator
# -T title
# -t tags
# -s search
# -S stats
# -l list all url
# -o open
# -O open first
# -x copy to clipboard
# -X copy first URL
# -h help
# -H more help
# -v version
# -V more version ?
# -g generate html file
# -G use this file
# -g -g generate 1 file per tags
        # used      : -a-bCc-------gHh----------------------Tt--Vv-w----------------
        # available : A-B---DdEeFfG---IiJjKkLlMmNnOoPpQqRrSs--Uu--W-XxYyZz0123456789
echo "in else"
        while getopts ":a:b:c:t:T:w:CghHV" option; do
echo "in while"
                case ${option} in
                        a) __a=1; __url="${OPTARG}";;	# Add url to bookmark
                        b) __b="${OPTARG}";;	# Bookmark file
                        c) __c="${OPTARG}";;	# Config file
			C) __C=1;;
			g) (( __g++ ));;	# generate html file(s)
			v|V) echo "${0} v${VERSION}"; exit 0;;
                        t) __t="${OPTARG}";;	# tags for a URL
                        T) __T="${OPTARG}";;	# Title for a URL
                        w) __w="${OPTARG}";;	# Working directory
                        H|h) usage; exit 0;;
			:) echo "Missing argument for '-${OPTARG}'" >&2 ; exit 1 ;;
                        *) echo "Argument unknown '-${option}'" >&2 ; exit 1 ;; # usage;;

                esac
        done
fi

if [ $(( ${__a:=0} + ${__C:=0} + ${__d:=0} + ${__g:=0} + ${__l:=0} + ${__o:=0} + ${__x:=0} + ${__s:=0} )) -gt 1 ]; then
        echo "You have to choose between -a, -C, -d, -g, -l, -o, -s, -x" >&2
        echo "Use -h for help" >&2
	exit 0
#elif [ $(( ${__b:=0} + ${__d:=0} + ${__l:=0} + ${__p:=0} + ${__r:=0} + ${__s:=0} )) -lt 1 ]; then
#        echo "Nothing to do ?" >&2
#        usage
fi
if [ ! -z "${__w:=}" -a ! -d "${__w}" ]; then
        echo "Working directory doesn't exist !" >&2
        usage
fi
config "${__c:=}"

[[ ${__C:=0} -eq 1 ]] && defineColors 1 && exit 0 

# Il doit y avoir un default tag

# Header :
# + counter URLs open
# + counter URLs copied
# + counter URLs deleted
